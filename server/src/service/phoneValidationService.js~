"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var ServiceSpec = require("../spec/service");
var errors_1 = require("../errors");
var SMSClient = require("@alicloud/sms-sdk");
var PhoneValidationService = /** @class */ (function (_super) {
    __extends(PhoneValidationService, _super);
    function PhoneValidationService(settings) {
        return _super.call(this, settings) || this;
    }
    PhoneValidationService.prototype.sendValidationCode = function (option, callback) {
        var _this = this;
        var expires = option.expires || this.settings.phoneValidation.expires || 1000 * 60;
        var _a = this.settings.phoneValidation.aliSMS, accessKeyId = _a.accessKeyId, secretAccessKey = _a.secretAccessKey;
        var smsClient = new SMSClient({
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey
        });
        var phone = option.phone;
        var code = Math.random().toString().slice(-6);
        var id = this.createSessionId(phone);
        smsClient.sendSMS({
            PhoneNumbers: phone,
            SignName: this.settings.phoneValidation.aliSMS.SignName,
            TemplateCode: this.settings.phoneValidation.aliSMS.TemplateCode,
            TemplateParam: "{\"code\":" + code + "}"
        }).then(function (res) {
            var Code = res.Code;
            if (Code === "OK") {
                _this.services.TTLSessionStorage;
                _this.services.TTLSessionStorage.getOrCreateTTLSession({
                    id: id,
                    data: {
                        code: code,
                        phone: phone
                    },
                    ttl: expires
                }, function (err, id) {
                    callback(err);
                });
                return;
            }
            callback(new errors_1.Errors.UnknownError("failed to send sms"));
        }, function (err) {
            callback(new errors_1.Errors.UnknownError("failed to send sms"));
        });
    };
    PhoneValidationService.prototype.isPhoneValid = function (option, callback) {
        var id = this.createSessionId(option.phone);
        var mc = this.settings.phoneValidation.magicCode;
        if (mc && mc === option.code) {
            callback(null, true);
            return;
        }
        this.services.TTLSessionStorage.getTTLSessionDataById({ id: id }, function (err, data) {
            if (data && data.code === option.code && data.phone === option.phone) {
                callback(null, true);
                return;
            }
            callback(new Error("Invalid"), false);
        });
    };
    PhoneValidationService.prototype.createSessionId = function (phone) {
        return "phone-verification-" + phone;
    };
    return PhoneValidationService;
}(ServiceSpec.PhoneValidationService));
exports.PhoneValidationService = PhoneValidationService;
//# sourceMappingURL=phoneValidationService.js.map